{"ast":null,"code":"const emailRegex = /^[A-Za-z0-9_\\.]+@[A-Za-z]+\\.[A-Za-z]{2,3}$/;\nconst allowedFileTypes = ['image/jpeg', 'image/jpg', 'image/png'];\nconst maxFileSize = 5242880;\nconst emailValidator = email => {\n  if (!email) {\n    return 'Email is required';\n  } else if (emailRegex.test(email) === false) {\n    return 'Invalid Email';\n  }\n  return '';\n};\nconst passwordValidator = password => {\n  if (!password) {\n    return 'Password is required';\n  } else if (password.length < 6) {\n    return 'Password must be at least 6 characters long';\n  }\n  return '';\n};\nconst confirmPasswordValidator = (password, passwordConfirm) => {\n  if (!passwordConfirm) {\n    return 'Confirm password is required';\n  } else if (passwordConfirm !== password) {\n    return 'Passwords do not match';\n  }\n  return '';\n};\nconst fileValidator = file => {\n  if (allowedFileTypes.indexOf(file.type) === -1) {\n    return 'The chosen file type is not supported';\n  }\n  if (file.size > maxFileSize) {\n    return 'File exceeds maximum file size of 5MB';\n  }\n};\nconst titleValidator = title => {\n  if (!title) {\n    return 'Title is required';\n  }\n};\nexport { emailValidator, passwordValidator, confirmPasswordValidator, fileValidator, titleValidator };","map":{"version":3,"names":["emailRegex","allowedFileTypes","maxFileSize","emailValidator","email","test","passwordValidator","password","length","confirmPasswordValidator","passwordConfirm","fileValidator","file","indexOf","type","size","titleValidator","title"],"sources":["C:/Users/Niki/Documents/Softuni/React/photo-sharing-app/client/src/utils/validation/validator.js"],"sourcesContent":["const emailRegex = /^[A-Za-z0-9_\\.]+@[A-Za-z]+\\.[A-Za-z]{2,3}$/;\r\nconst allowedFileTypes = ['image/jpeg', 'image/jpg', 'image/png']\r\nconst maxFileSize = 5242880;\r\n\r\nconst emailValidator = (email) => {\r\n    if (!email) {\r\n        return 'Email is required';\r\n    }\r\n    else if (emailRegex.test(email) === false) {\r\n        return 'Invalid Email';\r\n    }\r\n    return '';\r\n};\r\nconst passwordValidator = (password) => {\r\n    if (!password) {\r\n        return 'Password is required'\r\n    }\r\n    else if (password.length < 6) {\r\n        return 'Password must be at least 6 characters long'\r\n    }\r\n    return '';\r\n};\r\nconst confirmPasswordValidator = (password, passwordConfirm) => {\r\n    if (!passwordConfirm) {\r\n        return 'Confirm password is required'\r\n    }\r\n    else if (passwordConfirm !== password) {\r\n        return 'Passwords do not match';\r\n    }\r\n    return '';\r\n};\r\nconst fileValidator = (file) => {\r\n    if (allowedFileTypes.indexOf(file.type) === -1) {\r\n        return 'The chosen file type is not supported';\r\n    }\r\n    if (file.size > maxFileSize) {\r\n        return 'File exceeds maximum file size of 5MB';\r\n    }\r\n};\r\nconst titleValidator = (title) => {\r\n    if (!title) {\r\n        return 'Title is required';\r\n    }\r\n}\r\n\r\nexport {\r\n    emailValidator,\r\n    passwordValidator,\r\n    confirmPasswordValidator,\r\n    fileValidator,\r\n    titleValidator\r\n}"],"mappings":"AAAA,MAAMA,UAAU,GAAG,4CAA4C;AAC/D,MAAMC,gBAAgB,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,WAAW,CAAC;AACjE,MAAMC,WAAW,GAAG,OAAO;AAE3B,MAAMC,cAAc,GAAIC,KAAK,IAAK;EAC9B,IAAI,CAACA,KAAK,EAAE;IACR,OAAO,mBAAmB;EAC9B,CAAC,MACI,IAAIJ,UAAU,CAACK,IAAI,CAACD,KAAK,CAAC,KAAK,KAAK,EAAE;IACvC,OAAO,eAAe;EAC1B;EACA,OAAO,EAAE;AACb,CAAC;AACD,MAAME,iBAAiB,GAAIC,QAAQ,IAAK;EACpC,IAAI,CAACA,QAAQ,EAAE;IACX,OAAO,sBAAsB;EACjC,CAAC,MACI,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IAC1B,OAAO,6CAA6C;EACxD;EACA,OAAO,EAAE;AACb,CAAC;AACD,MAAMC,wBAAwB,GAAGA,CAACF,QAAQ,EAAEG,eAAe,KAAK;EAC5D,IAAI,CAACA,eAAe,EAAE;IAClB,OAAO,8BAA8B;EACzC,CAAC,MACI,IAAIA,eAAe,KAAKH,QAAQ,EAAE;IACnC,OAAO,wBAAwB;EACnC;EACA,OAAO,EAAE;AACb,CAAC;AACD,MAAMI,aAAa,GAAIC,IAAI,IAAK;EAC5B,IAAIX,gBAAgB,CAACY,OAAO,CAACD,IAAI,CAACE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;IAC5C,OAAO,uCAAuC;EAClD;EACA,IAAIF,IAAI,CAACG,IAAI,GAAGb,WAAW,EAAE;IACzB,OAAO,uCAAuC;EAClD;AACJ,CAAC;AACD,MAAMc,cAAc,GAAIC,KAAK,IAAK;EAC9B,IAAI,CAACA,KAAK,EAAE;IACR,OAAO,mBAAmB;EAC9B;AACJ,CAAC;AAED,SACId,cAAc,EACdG,iBAAiB,EACjBG,wBAAwB,EACxBE,aAAa,EACbK,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}