{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { emailValidator, passwordValidator, confirmPasswordValidator, fileValidator, titleValidator } from '../utils/validation/validator';\nexport const useValidateForm = formValues => {\n  _s();\n  const [errors, setErrors] = useState({\n    email: {\n      error: '',\n      isValid: true\n    },\n    password: {\n      error: '',\n      isValid: true\n    },\n    confirmPassword: {\n      error: '',\n      isValid: true\n    },\n    file: {\n      error: '',\n      isValid: true\n    },\n    title: {\n      error: '',\n      isValid: true\n    }\n  });\n  const validateForm = () => {\n    if (formValues.email) {\n      let error = emailValidator(formValues.email);\n      if (error) {\n        setErrors(err => ({\n          ...err,\n          [err.email]: false\n        }));\n      }\n    }\n    if (formValues.password) {\n      let error = passwordValidator(formValues.password);\n      if (error) {\n        setErrors(err => ({\n          ...err,\n          [err.password]: false\n        }));\n      }\n    }\n    if (formValues.confirmPassword) {\n      let error = confirmPasswordValidator(formValues.password, formValues.confirmPassword);\n      if (error) {\n        setErrors(err => ({\n          ...err,\n          [err.confirmPassword]: false\n        }));\n      }\n    }\n    if (formValues.file) {\n      let error = fileValidator(formValues.file);\n      if (error) {\n        setErrors(err => ({\n          ...err,\n          [err.file]: false\n        }));\n      }\n    }\n    if (formValues.title) {\n      let error = titleValidator(formValues.title);\n      if (error) {\n        setErrors(err => ({\n          ...err,\n          [err.title]: false\n        }));\n      }\n    }\n  };\n  return {\n    errors,\n    validateForm\n  };\n};\n_s(useValidateForm, \"soPDWBqL2f/HHDii6RaXFnYD/sY=\");","map":{"version":3,"names":["useState","emailValidator","passwordValidator","confirmPasswordValidator","fileValidator","titleValidator","useValidateForm","formValues","_s","errors","setErrors","email","error","isValid","password","confirmPassword","file","title","validateForm","err"],"sources":["C:/Users/Niki/Documents/Softuni/React/photo-sharing-app/client/src/hooks/useValidateForm.js"],"sourcesContent":["import { useState } from 'react'\r\n\r\nimport {\r\n    emailValidator,\r\n    passwordValidator,\r\n    confirmPasswordValidator,\r\n    fileValidator,\r\n    titleValidator\r\n} from '../utils/validation/validator';\r\n\r\nexport const useValidateForm = (formValues) => {\r\n\r\n    const [errors, setErrors] = useState({\r\n        email: {\r\n            error: '',\r\n            isValid: true\r\n        },\r\n        password: {\r\n            error: '',\r\n            isValid: true\r\n        },\r\n        confirmPassword: {\r\n            error: '',\r\n            isValid: true\r\n        },\r\n        file: {\r\n            error: '',\r\n            isValid: true\r\n        },\r\n        title: {\r\n            error: '',\r\n            isValid: true\r\n        }\r\n\r\n    });\r\n\r\n    const validateForm = () => {\r\n\r\n        if (formValues.email) {\r\n            let error = emailValidator(formValues.email);\r\n            if (error) {\r\n                setErrors(err => ({ ...err, [err.email]: false }))\r\n            }\r\n        }\r\n        if (formValues.password) {\r\n            let error = passwordValidator(formValues.password);\r\n            if (error) {\r\n                setErrors(err => ({ ...err, [err.password]: false }))\r\n            }\r\n        }\r\n        if (formValues.confirmPassword) {\r\n            let error = confirmPasswordValidator(formValues.password, formValues.confirmPassword);\r\n            if (error) {\r\n                setErrors(err => ({ ...err, [err.confirmPassword]: false }))\r\n            }\r\n        }\r\n        if (formValues.file) {\r\n            let error = fileValidator(formValues.file);\r\n            if (error) {\r\n                setErrors(err => ({ ...err, [err.file]: false }))\r\n            }\r\n        }\r\n        if (formValues.title) {\r\n            let error = titleValidator(formValues.title);\r\n            if (error) {\r\n                setErrors(err => ({ ...err, [err.title]: false }))\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        errors,\r\n        validateForm\r\n    };\r\n\r\n};"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,SACIC,cAAc,EACdC,iBAAiB,EACjBC,wBAAwB,EACxBC,aAAa,EACbC,cAAc,QACX,+BAA+B;AAEtC,OAAO,MAAMC,eAAe,GAAIC,UAAU,IAAK;EAAAC,EAAA;EAE3C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC;IACjCW,KAAK,EAAE;MACHC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE;IACb,CAAC;IACDC,QAAQ,EAAE;MACNF,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE;IACb,CAAC;IACDE,eAAe,EAAE;MACbH,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE;IACb,CAAC;IACDG,IAAI,EAAE;MACFJ,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE;IACb,CAAC;IACDI,KAAK,EAAE;MACHL,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE;IACb;EAEJ,CAAC,CAAC;EAEF,MAAMK,YAAY,GAAGA,CAAA,KAAM;IAEvB,IAAIX,UAAU,CAACI,KAAK,EAAE;MAClB,IAAIC,KAAK,GAAGX,cAAc,CAACM,UAAU,CAACI,KAAK,CAAC;MAC5C,IAAIC,KAAK,EAAE;QACPF,SAAS,CAACS,GAAG,KAAK;UAAE,GAAGA,GAAG;UAAE,CAACA,GAAG,CAACR,KAAK,GAAG;QAAM,CAAC,CAAC,CAAC;MACtD;IACJ;IACA,IAAIJ,UAAU,CAACO,QAAQ,EAAE;MACrB,IAAIF,KAAK,GAAGV,iBAAiB,CAACK,UAAU,CAACO,QAAQ,CAAC;MAClD,IAAIF,KAAK,EAAE;QACPF,SAAS,CAACS,GAAG,KAAK;UAAE,GAAGA,GAAG;UAAE,CAACA,GAAG,CAACL,QAAQ,GAAG;QAAM,CAAC,CAAC,CAAC;MACzD;IACJ;IACA,IAAIP,UAAU,CAACQ,eAAe,EAAE;MAC5B,IAAIH,KAAK,GAAGT,wBAAwB,CAACI,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACQ,eAAe,CAAC;MACrF,IAAIH,KAAK,EAAE;QACPF,SAAS,CAACS,GAAG,KAAK;UAAE,GAAGA,GAAG;UAAE,CAACA,GAAG,CAACJ,eAAe,GAAG;QAAM,CAAC,CAAC,CAAC;MAChE;IACJ;IACA,IAAIR,UAAU,CAACS,IAAI,EAAE;MACjB,IAAIJ,KAAK,GAAGR,aAAa,CAACG,UAAU,CAACS,IAAI,CAAC;MAC1C,IAAIJ,KAAK,EAAE;QACPF,SAAS,CAACS,GAAG,KAAK;UAAE,GAAGA,GAAG;UAAE,CAACA,GAAG,CAACH,IAAI,GAAG;QAAM,CAAC,CAAC,CAAC;MACrD;IACJ;IACA,IAAIT,UAAU,CAACU,KAAK,EAAE;MAClB,IAAIL,KAAK,GAAGP,cAAc,CAACE,UAAU,CAACU,KAAK,CAAC;MAC5C,IAAIL,KAAK,EAAE;QACPF,SAAS,CAACS,GAAG,KAAK;UAAE,GAAGA,GAAG;UAAE,CAACA,GAAG,CAACF,KAAK,GAAG;QAAM,CAAC,CAAC,CAAC;MACtD;IACJ;EACJ,CAAC;EAED,OAAO;IACHR,MAAM;IACNS;EACJ,CAAC;AAEL,CAAC;AAACV,EAAA,CAjEWF,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}